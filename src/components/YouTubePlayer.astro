---
export interface Props {
  videos: Array<{ youtubeId: string; title: string; year: number }>;
}

const { videos } = Astro.props;
const initialVideo = videos[0];
const thumbnailUrl = `https://img.youtube.com/vi/${initialVideo.youtubeId}/0.jpg`;
---

<div class="youtube-player-container" data-videos={JSON.stringify(videos)}>
  <div class="youtube-player">
    <iframe
      src={`https://www.youtube.com/embed/${initialVideo.youtubeId}?enablejsapi=1`}
      frameborder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowfullscreen
    ></iframe>
  </div>
  <div class="overlay" style={`background-image: url(${thumbnailUrl});`}></div>
  <button class="play-button" aria-label="Play video">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-12 h-12">
      <path fill-rule="evenodd" d="M4.5 5.653c0-1.426 1.529-2.33 2.779-1.643l11.54 6.348c1.295.712 1.295 2.573 0 3.285L7.28 19.991c-1.25.687-2.779-.217-2.779-1.643V5.653z" clip-rule="evenodd" />
    </svg>
  </button>
  <div class="custom-controls">
    <button class="pause-button" aria-label="Pause video">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">
        <path fill-rule="evenodd" d="M6.75 5.25a.75.75 0 01.75-.75H9a.75.75 0 01.75.75v13.5a.75.75 0 01-.75.75H7.5a.75.75 0 01-.75-.75V5.25zm7.5 0A.75.75 0 0115 4.5h1.5a.75.75 0 01.75.75v13.5a.75.75 0 01-.75.75H15a.75.75 0 01-.75-.75V5.25z" clip-rule="evenodd" />
      </svg>
    </button>
    <div class="volume-control">
      <button class="volume-button" aria-label="Toggle mute">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">
          <path d="M13.5 4.06c0-1.336-1.616-2.005-2.56-1.06l-4.5 4.5H4.508c-1.141 0-2.318.664-2.66 1.905A9.76 9.76 0 001.5 12c0 .898.121 1.768.35 2.595.341 1.24 1.518 1.905 2.659 1.905h1.93l4.5 4.5c.945.945 2.561.276 2.561-1.06V4.06zM18.584 5.106a.75.75 0 011.06 0c3.808 3.807 3.808 9.98 0 13.788a.75.75 0 11-1.06-1.06 8.25 8.25 0 000-11.668.75.75 0 010-1.06z" />
          <path d="M15.932 7.757a.75.75 0 011.061 0 6 6 0 010 8.486.75.75 0 01-1.06-1.061 4.5 4.5 0 000-6.364.75.75 0 010-1.06z" />
        </svg>
      </button>
      <div class="volume-slider-container">
        <input type="range" class="volume-slider" min="0" max="100" value="100" />
      </div>
    </div>
    <div class="quality-control">
      <button class="quality-button" aria-label="Video quality">
        <span class="current-quality">Auto</span>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
          <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
        </svg>
      </button>
      <div class="quality-options">
        <!-- Quality options will be populated dynamically -->
      </div>
    </div>
    <button class="fullscreen-button" aria-label="Toggle fullscreen">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">
        <path fill-rule="evenodd" d="M3.75 3.75a.75.75 0 01.75-.75h5.25a.75.75 0 010 1.5H5.25v4.5a.75.75 0 01-1.5 0V3.75zm11.25-.75a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0V3.75a.75.75 0 00-.75-.75h-5.25zm-9 9.75a.75.75 0 00-1.5 0v5.25c0 .414.336.75.75.75h5.25a.75.75 0 000-1.5H5.25v-4.5zm16.5 0a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h5.25a.75.75 0 00.75-.75v-5.25z" clip-rule="evenodd" />
      </svg>
    </button>
  </div>
</div>

<script>
  function initYouTubePlayer() {
    const container = document.querySelector('.youtube-player-container');
    const iframe = container.querySelector('iframe');
    const playButton = container.querySelector('.play-button');
    const pauseButton = container.querySelector('.pause-button');
    const volumeButton = container.querySelector('.volume-button');
    const volumeSlider = container.querySelector('.volume-slider');
    const qualityButton = container.querySelector('.quality-button');
    const qualityOptions = container.querySelector('.quality-options');
    const currentQuality = qualityButton.querySelector('.current-quality');
    const fullscreenButton = container.querySelector('.fullscreen-button');
    const overlay = container.querySelector('.overlay');
    const customControls = container.querySelector('.custom-controls');

    let player;
    let currentVideoIndex = 0;
    const videos = JSON.parse(container.dataset.videos);

    // Initialize YouTube Player API
    window.onYouTubeIframeAPIReady = function() {
      player = new YT.Player(iframe, {
        events: {
          'onStateChange': onPlayerStateChange,
          'onReady': () => {
            updateQualityOptions();
            hideControlsInitially();
            ensureUnmuted(); // Add this line to ensure the player is unmuted
          }
        }
      });
    };

    function onPlayerStateChange(event) {
      if (event.data == YT.PlayerState.PLAYING) {
        playButton.style.display = 'none';
        overlay.style.opacity = '0';
        customControls.style.opacity = '1';
      } else if (event.data == YT.PlayerState.PAUSED || event.data == YT.PlayerState.ENDED) {
        playButton.style.display = 'flex';
        overlay.style.opacity = '1';
        customControls.style.opacity = '0';
      }
    }

    // Add this function to hide controls initially
    function hideControlsInitially() {
      playButton.style.display = 'flex';
      overlay.style.opacity = '1';
      customControls.style.opacity = '0';
    }

    function togglePlay() {
      if (player && typeof player.getPlayerState === 'function') {
        if (player.getPlayerState() === YT.PlayerState.PLAYING) {
          player.pauseVideo();
        } else {
          player.playVideo();
        }
      }
    }

    playButton.addEventListener('click', togglePlay);
    overlay.addEventListener('click', togglePlay);

    pauseButton.addEventListener('click', () => {
      if (player && typeof player.pauseVideo === 'function') {
        player.pauseVideo();
      }
    });

    volumeButton.addEventListener('click', () => {
      if (player && typeof player.isMuted === 'function') {
        if (player.isMuted()) {
          player.unMute();
          volumeSlider.value = player.getVolume();
        } else {
          player.mute();
          volumeSlider.value = 0;
        }
      }
    });

    volumeSlider.addEventListener('input', () => {
      if (player && typeof player.setVolume === 'function') {
        player.setVolume(volumeSlider.value);
        if (player.isMuted()) {
          player.unMute();
        }
      }
    });

    function updateQualityOptions() {
      if (player && typeof player.getAvailableQualityLevels === 'function') {
        const qualities = player.getAvailableQualityLevels();
        qualityOptions.innerHTML = '';
        qualities.forEach(quality => {
          const option = document.createElement('button');
          option.textContent = getQualityLabel(quality);
          option.addEventListener('click', () => {
            player.setPlaybackQuality(quality);
            currentQuality.textContent = getQualityLabel(quality);
            qualityOptions.style.display = 'none';
          });
          qualityOptions.appendChild(option);
        });
      }
    }

    function getQualityLabel(quality) {
      const labels = {
        highres: '4K',
        hd2160: '4K',
        hd1440: '1440p',
        hd1080: '1080p',
        hd720: '720p',
        large: '480p',
        medium: '360p',
        small: '240p',
        tiny: '144p',
        auto: 'Auto'
      };
      return labels[quality] || quality;
    }

    qualityButton.addEventListener('click', () => {
      qualityOptions.style.display = qualityOptions.style.display === 'none' ? 'block' : 'none';
      updateQualityOptions();
    });

    fullscreenButton.addEventListener('click', () => {
      if (!document.fullscreenElement) {
        container.requestFullscreen().catch(err => {
          console.error(`Error attempting to enable full-screen mode: ${err.message}`);
        });
      } else {
        document.exitFullscreen();
      }
    });

    // Add event listener for changing videos
    window.addEventListener('change-video', (event) => {
      const newIndex = event.detail.index;
      if (newIndex !== currentVideoIndex && newIndex < videos.length) {
        currentVideoIndex = newIndex;
        const newVideoId = videos[newIndex].youtubeId;
        player.loadVideoById(newVideoId);
        overlay.style.backgroundImage = `url(https://img.youtube.com/vi/${newVideoId}/0.jpg)`;
      }
    });

    // Add this function to ensure the player is unmuted
    function ensureUnmuted() {
      if (player && typeof player.unMute === 'function' && typeof player.isMuted === 'function') {
        if (player.isMuted()) {
          player.unMute();
        }
        volumeSlider.value = player.getVolume();
      }
    }

    // Load YouTube Player API
    const tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    const firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  }

  // Initialize the player when the component mounts
  initYouTubePlayer();
</script>

<style>
  .youtube-player-container {
        overflow: hidden;
border-radius: 0.5rem;
    position: relative;
    width: 100%;
    height: 100%;
  }

  .youtube-player {
    
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
  }

  .youtube-player iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 1;
    transition: opacity 0.3s ease;
    background-size: cover;
    background-position: center;
    cursor: pointer;
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: none;
    border-radius: 50%;
    width: 68px;
    height: 68px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    backdrop-filter: blur(10px);
    background-color: rgba(255, 255, 255, 0.1);
  }

  .play-button svg {
    width: 40px;
    height: 40px;
    fill: white;
  }

  .custom-controls {
    position: absolute;
    bottom: 10px;
    right: 10px;
    display: flex;
    gap: 10px;
    opacity: 0;
    transition: opacity 0.3s ease;
    align-items: center;
    backdrop-filter: blur(10px);
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 5px;
  }

  .youtube-player-container:hover .custom-controls {
    opacity: 1;
  }

  .pause-button,
  .volume-button,
  .quality-button,
  .fullscreen-button {
    background-color: transparent;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
    color: white;
  }

  .pause-button:hover,
  .volume-button:hover,
  .quality-button:hover,
  .fullscreen-button:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }

  .pause-button svg,
  .volume-button svg,
  .fullscreen-button svg {
    width: 24px;
    height: 24px;
    fill: white;
  }

  .volume-control {
    
    position: relative;
    display: flex;
    align-items: center;
  }

  .volume-slider-container {
    top:-5px;
    width: 0;
    overflow: hidden;
    transition: width 0.3s ease;
  }

  .volume-control:hover .volume-slider-container {
    width: 80px;
  }

  .volume-slider {
    
    width: 80px;
    height: 4px;
    -webkit-appearance: none;
    background: rgba(255, 255, 255, 0.3);
    outline: none;
    opacity: 1;
    transition: opacity 0.2s ease;
  }

  .volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 12px;
    height: 12px;
    background: white;
    cursor: pointer;
    border-radius: 50%;
  }

  .volume-slider::-moz-range-thumb {
    width: 12px;
    height: 12px;
    background: white;
    cursor: pointer;
    border-radius: 50%;
  }

  .quality-control {
    position: relative;
  }

  .quality-button {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 14px;
    font-weight: bold;
  }

  .quality-options {
    display: none;
    position: absolute;
    bottom: 100%;
    right: 0;
    background-color: rgba(0, 0, 0, 0.8);
    border-radius: 4px;
    padding: 4px;
    margin-bottom: 8px;
  }

  .quality-options button {
    display: block;
    width: 100%;
    padding: 4px 8px;
    text-align: left;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
  }

  .quality-options button:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }

  /* Add this to ensure text is not transparent */
  .quality-options,
  .quality-button {
    color: white;
  }
</style>